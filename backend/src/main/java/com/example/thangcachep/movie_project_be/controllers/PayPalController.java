package com.example.thangcachep.movie_project_be.controllers;

import com.example.thangcachep.movie_project_be.models.request.PayPalPaymentRequest;
import com.example.thangcachep.movie_project_be.services.impl.PayPalService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("${api.prefix}/paypal")
@RequiredArgsConstructor
@Slf4j
public class PayPalController {

    private final PayPalService payPalService;

    /**
     * T·∫°o payment v√† nh·∫≠n approval URL
     * POST /api/v1/paypal/create
     */
    @PostMapping("/create")
    public ResponseEntity<?> createPayment(@RequestBody PayPalPaymentRequest request) {
        try {
            log.info("üì® Nh·∫≠n request t·∫°o PayPal payment - S·ªë ti·ªÅn: {} {}", 
                    request.getAmount(), request.getCurrency());
            
            // Validate request
            if (request.getAmount() == null || request.getAmount() <= 0) {
                log.warn("‚ö†Ô∏è S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá: {}", request.getAmount());
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá"));
            }
            
            if (request.getCurrency() == null || request.getCurrency().isEmpty()) {
                request.setCurrency("USD"); // Default currency
                log.info("üí± S·ª≠ d·ª•ng ti·ªÅn t·ªá m·∫∑c ƒë·ªãnh: USD");
            }
            
            // Create payment
            String approvalUrl = payPalService.createPayment(request);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("approvalUrl", approvalUrl);
            response.put("message", "‚úÖ T·∫°o thanh to√°n th√†nh c√¥ng. Vui l√≤ng chuy·ªÉn ƒë·∫øn PayPal ƒë·ªÉ ho√†n t·∫•t.");
            
            log.info("‚úÖ Tr·∫£ v·ªÅ approval URL cho client");
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói t·∫°o PayPal payment: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("Kh√¥ng th·ªÉ t·∫°o thanh to√°n: " + e.getMessage()));
        }
    }

    /**
     * Callback sau khi user approve payment tr√™n PayPal
     * GET /api/v1/paypal/success?token=ORDER_ID
     */
    @GetMapping("/success")
    public ResponseEntity<?> successPayment(@RequestParam("token") String orderId) {
        try {
            log.info("üéâ User ƒë√£ approve payment - Order ID: {}", orderId);
            
            String result = payPalService.capturePayment(orderId);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("orderId", orderId);
            response.put("message", result);
            
            log.info("‚úÖ Capture payment th√†nh c√¥ng");
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói capture payment: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("Kh√¥ng th·ªÉ ho√†n t·∫•t thanh to√°n: " + e.getMessage()));
        }
    }

    /**
     * Callback khi user cancel payment
     * GET /api/v1/paypal/cancel
     */
    @GetMapping("/cancel")
    public ResponseEntity<?> cancelPayment() {
        log.warn("‚ùå User ƒë√£ h·ªßy thanh to√°n PayPal");
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("message", "Thanh to√°n ƒë√£ b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng");
        
        return ResponseEntity.ok(response);
    }

    private Map<String, Object> createErrorResponse(String message) {
        Map<String, Object> error = new HashMap<>();
        error.put("success", false);
        error.put("message", message);
        return error;
    }
}
